{"version":3,"sources":["logo.svg","components/peak-plate-predictor/enums.js","components/peak-plate-predictor/helpers.js","components/peak-plate-predictor/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PEAK_PLATE_RESPONSE","IS_PEAK_AND_PLATE","NO_PEAK_AND_PLATE","INVALID_DATE","INVALID_PLATE_NUMBER","checkIsPeakAndPlate","plateNumber","inputDate","inputTime","completeDateString","moment","isValid","lastCharacter","substring","length","isNaN","firstDateMorning","lastDateMorning","firstDateAffternoon","lastDateAffternoon","isHourPeakPlate","inputDateAndTime","lastDigitPlateNumber","Number","weekday","days","isPeakPlate","PeakPlatePredictor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Date","toISOString","substr","toTimeString","_handleSubmit","bind","assertThisInitialized","event","preventDefault","vehicle","peakAndPlate","displayMessage","alert","_this2","react_default","a","createElement","style","padding","onSubmit","type","name","required","textTransform","placeholder","minLength","maxLength","value","onChange","setState","target","React","Component","App","className","src","logo","alt","peak_plate_predictor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d313d3b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const PEAK_PLATE_RESPONSE = {\r\n    IS_PEAK_AND_PLATE: 0,\r\n    NO_PEAK_AND_PLATE: 1,\r\n    INVALID_DATE: 2,\r\n    INVALID_PLATE_NUMBER: 3,\r\n};\r\n","import {PEAK_PLATE_RESPONSE} from \"./enums\";\r\nimport moment from \"moment\";\r\n\r\nexport function checkIsPeakAndPlate(plateNumber: string, inputDate: string, inputTime: string) {\r\n    let completeDateString = inputDate + \" \" + inputTime;\r\n\r\n    //Check if date is valid\r\n    let DateFormat = 'YYYY-MM-DD HH:mm';\r\n    if (!moment(completeDateString, DateFormat, true).isValid()) {\r\n        return PEAK_PLATE_RESPONSE.INVALID_DATE;\r\n    }\r\n\r\n    //Check PlateNumber\r\n    let lastCharacter = plateNumber.substring(plateNumber.length - 1, plateNumber.length);\r\n    if (!plateNumber  || isNaN(lastCharacter) || (plateNumber.length !== 6 && plateNumber.length !== 7)) {\r\n        return PEAK_PLATE_RESPONSE.INVALID_PLATE_NUMBER;\r\n    }\r\n\r\n\r\n    // Check Time is in peak and plate hours\r\n    let firstDateMorning = moment(inputDate + \" 07:00\");\r\n\r\n    let lastDateMorning = moment(inputDate + \" 09:30\");\r\n\r\n    let firstDateAffternoon = moment(inputDate + \" 16:00\");\r\n\r\n    let lastDateAffternoon = moment(inputDate + \" 19:30\");\r\n\r\n    let isHourPeakPlate = false;\r\n    let inputDateAndTime = moment(completeDateString);\r\n\r\n    if (inputDateAndTime >= firstDateMorning && inputDateAndTime <= lastDateMorning) {\r\n        isHourPeakPlate = true\r\n    }\r\n\r\n    if (inputDateAndTime >= firstDateAffternoon && inputDateAndTime <= lastDateAffternoon) {\r\n        isHourPeakPlate = true\r\n    }\r\n\r\n    let lastDigitPlateNumber = Number(lastCharacter);\r\n\r\n\r\n    let weekday = inputDateAndTime.days();\r\n\r\n    // Check is Peak and Plate\r\n    let isPeakPlate = false;\r\n    switch (lastDigitPlateNumber) {\r\n        case 1:\r\n        case 2:\r\n            if (weekday === 1 && isHourPeakPlate) {\r\n                isPeakPlate = true;\r\n            }\r\n            break;\r\n        case 3:\r\n        case 4:\r\n            if (weekday === 2 && isHourPeakPlate) {\r\n                isPeakPlate = true;\r\n            }\r\n            break;\r\n        case 5:\r\n        case 6:\r\n            if (weekday === 3 && isHourPeakPlate) {\r\n                isPeakPlate = true;\r\n            }\r\n            break;\r\n        case 7:\r\n        case 8:\r\n            if (weekday === 4 && isHourPeakPlate) {\r\n                isPeakPlate = true;\r\n            }\r\n            break;\r\n        case 9:\r\n        case 0:\r\n            if (weekday === 5 && isHourPeakPlate) {\r\n                isPeakPlate = true;\r\n            }\r\n            break;\r\n        default:\r\n            isPeakPlate = false;\r\n    }\r\n\r\n    if (isPeakPlate) {\r\n        return PEAK_PLATE_RESPONSE.IS_PEAK_AND_PLATE\r\n    } else {\r\n        return PEAK_PLATE_RESPONSE.NO_PEAK_AND_PLATE\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","// @flow\r\nimport React from 'react';\r\nimport {PEAK_PLATE_RESPONSE} from \"./enums\";\r\nimport {checkIsPeakAndPlate} from \"./helpers\";\r\n\r\nexport interface Props {\r\n}\r\n\r\nexport interface State {\r\n    plateNumber: string,\r\n    inputDate: string,\r\n    inputTime: string,\r\n}\r\n\r\nclass PeakPlatePredictor extends React.Component<Props, State> {\r\n    _handleSubmit: Function;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            plateNumber: \"\",\r\n            inputDate: new Date().toISOString().substr(0, 10),\r\n            inputTime: new Date().toTimeString().substr(0, 5),\r\n        };\r\n        this._handleSubmit = this._handleSubmit.bind(this);\r\n    }\r\n\r\n\r\n    _handleSubmit(event: any) {\r\n        event.preventDefault();\r\n\r\n        let vehicle = {\r\n            plateNumber: this.state.plateNumber,\r\n            peakAndPlate: checkIsPeakAndPlate(this.state.plateNumber, this.state.inputDate, this.state.inputTime),\r\n            displayMessage: \"\",\r\n        };\r\n\r\n        switch (vehicle.peakAndPlate) {\r\n            case PEAK_PLATE_RESPONSE.IS_PEAK_AND_PLATE:\r\n                vehicle.displayMessage = \"vehicle can not be driven\";\r\n                break;\r\n\r\n            case PEAK_PLATE_RESPONSE.NO_PEAK_AND_PLATE:\r\n                vehicle.displayMessage = \"vehicle can be driven\";\r\n                break;\r\n\r\n            case PEAK_PLATE_RESPONSE.INVALID_PLATE_NUMBER:\r\n                vehicle.displayMessage = \"Invalid Plane Number\";\r\n                break;\r\n            case PEAK_PLATE_RESPONSE.INVALID_DATE:\r\n                vehicle.displayMessage = \"Invalid Date\";\r\n                break;\r\n            default:\r\n        }\r\n\r\n        alert(\"VEHICLE:\" + vehicle.plateNumber + \"   MESSAGE:\" + vehicle.displayMessage);\r\n\r\n        // console.log(\"plateNumber\", this.state.plateNumber);\r\n        // console.log(\"inputDate\", this.state.inputDate);\r\n        // console.log(\"inputTime\", this.state.inputTime);\r\n        // let completeDateString = this.state.inputDate + \" \" + this.state.inputTime;\r\n        // console.log(\"completeDateString\", completeDateString);\r\n        //\r\n        // //Check if date is valid\r\n        // let DateFormat = 'YYYY-MM-DD HH:mm';\r\n        // if (!moment(completeDateString, DateFormat, true).isValid()) {\r\n        //     alert(\"Not Valid Date or Time\");\r\n        //     return\r\n        // }\r\n        //\r\n        // let inputDateAndTime = moment(completeDateString);\r\n        // console.log(\"inputDateAndTime\", inputDateAndTime);\r\n        //\r\n        // //Check PlateNumber\r\n        // let lastCharacter = this.state.plateNumber.substring(this.state.plateNumber.length - 1, this.state.plateNumber.length);\r\n        // console.log(\"lastCharacter\", lastCharacter);\r\n        // if (isNaN(lastCharacter)) {\r\n        //     alert(\"Not Valid Plate Number\");\r\n        //     return\r\n        // }\r\n        // let lastDigitPlateNumber = Number(lastCharacter);\r\n        // console.log(\"lastDigit\", lastDigitPlateNumber);\r\n        //\r\n        // // Check Time is in peak and plate hours\r\n        // let firstDateMorning = moment(this.state.inputDate + \" 07:00\");\r\n        // console.log(\"firstDateMorning\", firstDateMorning);\r\n        //\r\n        // let lastDateMorning = moment(this.state.inputDate + \" 09:30\");\r\n        // console.log(\"lastDateMorning\", lastDateMorning);\r\n        //\r\n        // let firstDateAffternoon = moment(this.state.inputDate + \" 16:00\");\r\n        // console.log(\"firstDateAffternoon\", firstDateAffternoon);\r\n        //\r\n        // let lastDateAffternoon = moment(this.state.inputDate + \" 19:30\");\r\n        // console.log(\"lastDateAffternoon\", lastDateAffternoon);\r\n        //\r\n        // let isHourPeakPlate = false;\r\n        //\r\n        // if (inputDateAndTime >= firstDateMorning && inputDateAndTime <= lastDateMorning) {\r\n        //     isHourPeakPlate = true\r\n        // }\r\n        //\r\n        // if (inputDateAndTime >= firstDateAffternoon && inputDateAndTime <= lastDateAffternoon) {\r\n        //     isHourPeakPlate = true\r\n        // }\r\n        // console.log(\"isHourPeakPlate\", isHourPeakPlate);\r\n        //\r\n        // let weekday = inputDateAndTime.days();\r\n        // console.log(\"weekday\", weekday);\r\n        //\r\n        // // Check is Peak and Plate\r\n        // let isPeakPlate = false;\r\n        // switch (lastDigitPlateNumber) {\r\n        //     case 1:\r\n        //     case 2:\r\n        //         if (weekday === 1 && isHourPeakPlate) {\r\n        //             isPeakPlate = true;\r\n        //         }\r\n        //         break;\r\n        //     case 3:\r\n        //     case 4:\r\n        //         if (weekday === 2 && isHourPeakPlate) {\r\n        //             isPeakPlate = true;\r\n        //         }\r\n        //         break;\r\n        //     case 5:\r\n        //     case 6:\r\n        //         if (weekday === 3 && isHourPeakPlate) {\r\n        //             isPeakPlate = true;\r\n        //         }\r\n        //         break;\r\n        //     case 7:\r\n        //     case 8:\r\n        //         if (weekday === 4 && isHourPeakPlate) {\r\n        //             isPeakPlate = true;\r\n        //         }\r\n        //         break;\r\n        //     case 9:\r\n        //     case 0:\r\n        //         if (weekday === 5 && isHourPeakPlate) {\r\n        //             isPeakPlate = true;\r\n        //         }\r\n        //         break;\r\n        //     default:\r\n        //         isPeakPlate = false;\r\n        // }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div>\r\n                <form style={{padding: 20}} onSubmit={this._handleSubmit}>\r\n                    <label style={{padding: 10}}>\r\n                        plate number:\r\n                        <input type=\"text\"\r\n                               name=\"plateNumber\"\r\n                               required\r\n                               style={{textTransform: \"uppercase\"}}\r\n                               placeholder=\"AAA9999\"\r\n                               minLength={6}\r\n                               maxLength={7}\r\n                               value={this.state.plateNumber}\r\n                               onChange={(event) => this.setState({plateNumber: event.target.value})}\r\n                        />\r\n                    </label>\r\n                    <label style={{padding: 10}}>\r\n                        Date:\r\n                        <input type=\"date\"\r\n                               required\r\n                               name=\"inputDate\"\r\n                               value={this.state.inputDate}\r\n                               onChange={(event) => this.setState({inputDate: event.target.value})}\r\n                        />\r\n                    </label>\r\n                    <label style={{padding: 10}}>\r\n                        Time:\r\n                        <input type=\"time\"\r\n                               name=\"name\"\r\n                               required\r\n                               value={this.state.inputTime}\r\n                               onChange={(event) => this.setState({inputTime: event.target.value})}\r\n                        />\r\n                    </label>\r\n                    <input type=\"submit\" value=\"Submit\"/>\r\n                </form>\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default PeakPlatePredictor;\r\n","import React, {Component} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport PeakPlatePredictor from './components/peak-plate-predictor/index';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n                    <p>\r\n                        React Js Component &quot;pico y placa&quot; predictor.\r\n                    </p>\r\n                </header>\r\n                <p>\r\n                    Component instance #1.\r\n                </p>\r\n                <PeakPlatePredictor/>\r\n                <p>\r\n                    Component instance #2.\r\n                </p>\r\n                <PeakPlatePredictor/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}